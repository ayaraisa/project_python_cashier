# -*- coding: utf-8 -*-
"""Cashier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dW9w65iQI2IJ1N2htQd3gprBWhP78rvr
"""

import pandas as pd
from tabulate import tabulate

#Inisialisasi utk class Transaction
class Transaction:

  def __init__ (self):
     self.cart = dict()   
  
  #Method add item utk menambah nama
  def add_item(
      self, item_name: str, item_qty: int, item_price: float or int):

      #Cek tipe data masing-masing item
      if type(item_name) != str:
        raise TypeError(
            "Item_name harus dalam bentuk str"
        )
      
      elif type(item_qty) != int:
        raise TypeError(
            "Item_qty harus dalam bentuk int"
        )

      elif type(item_price) != int and type(item_price) != float:
        raise TypeError(
            "Item_price harus dalam bentuk int"
        )
      #Memasukkan item ke dictionary
      else:
        dict_update = {item_name : [item_qty, item_price, item_qty * item_price]}
        self.cart.update(dict_update)
      print(f"Anda menambahkan {item_name} sebanyak {item_qty} seharga {item_price}")


  #Method update item name utk mengganti nama
  def update_item_name(self, item_name, new_item_name):
      self.item_name = str(item_name)
      self.new_item_name = str(new_item_name)

      temp = self.cart[item_name]
      self.cart.pop(item_name)
      self.cart.update({new_item_name: temp})

      self.check_order()
      print(f"Anda mengubah nama item {item_name} menjadi {new_item_name}")

  #Method update item qty utk mengganti jumlah item
  def update_item_qty(self, item_name, item_qty, new_item_qty):
      self.item_qty = int(item_qty)
      self.new_item_qty = int(item_qty)

      self.cart[item_name][0] = new_item_qty

      self.check_order()
      print(f"Anda mengubah jumlah item pada barang {item_name} yaitu menjadi {new_item_qty}")
  
    #Method update item price utk mengganti harga
  def update_item_price(self, item_name, item_price, new_item_price):
      self.item_price = int(item_price)
      self.new_item_price = int(new_item_price)

      self.cart[item_name][1] = new_item_price

      self.check_order()
      print(f"Anda mengubah harga item pada barang {item_name} yaitu menjadi {new_item_price}")
  
  #Method delete item utk menghapus item dari cart
  def delete_item(self, item_name):
      self.cart.pop(item_name)
      print(f"Anda berhasil menghapus pesanan {item_name}")
      print("")

  #Method reset item utk menghapus semua isi cart
  def reset_item (self):
      self.cart = self.cart.clear
      print("Semua item di keranjang Anda sudah dihapus")
  
  #Method show order utk menampilkan hasil tabel utk pengecekan
  def show_order(self):
      try: 
        #menampilkan semua pesanan
        check_table = pd.DataFrame(self.cart).T
        headers = ["Nama Item", "Jumlah Item", "Harga/Item", "Total Harga"]
        print(tabulate(check_table, headers, tablefmt="github"))
      
      except:
        print("Belum ada pemesanan")

  #Method total price utk menampilkan total harga belanja
  def total_price(self):
    
      total = 0
      for item in self.cart:
        total += self.cart[item][2] 

      #untuk perhitungan grand total dan perhitungan diskon
      if total >= 0 and total <= 200000:
        return print (f"Total pembayaran sebesar Rp {int(total)}")
      
      elif total > 200000 and total <= 300000:
        grand_total = total * 0.95 
        return print(f"Selamat! Anda mendapatkan diskon sebesar 5% \nTotal pembelanjaan Anda sebesar Rp {int(total)} menjadi Rp {int(grand_total)}")
      
      elif total >300000 and total <= 500000:
        grand_total = total * 0.92
        return print(f"Selamat! Anda mendapatkan diskon sebesar 8% \nTotal pembayaran Anda sebesar Rp {int(total)}")
      
      elif total >500000:
        grand_total = total *0.9
        return print(f"Selamat! Anda mendapatkan diskon sebesar 10% \nTotal pembayaran Anda sebesar Rp {int(total)}")
      
      else:
        return print("Silahkan dicek terlebih dahulu")

